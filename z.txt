This document provides a comprehensive explanation of the API, including its endpoints, encryption requirements, and how to implement it in a Next.js frontend application. The API handles user authentication, OTP confirmation, and password reset functionality. All requests require AES256 encryption for the request body, and responses include a SessionID that must be used in subsequent requests.

API Overview
Base URL
Endpoint URI: https://erpapi.tocan.com.ly/swagger/index.html

Authentication
Token: ult/42BVhDK38CaeOTl4pZ9JFRL7GMzDHX7kp8LqxTvefGWhBqhX5Ucu6O86KKQyvPEoDGOAcwM=

accessToken: zEUncObD31AJCPIIkroP5URtvBTkwYEnArEpNJSnW1s=

Encryption
Key: IwaznJVGXRQjrcLfmr3SeFAHgUD+4rfw

IV: a14512987e7belsqwa595a20100cbKS7q

Algorithm: AES256 (CBC mode)

Session Management
Every response returns a SessionID. This value must be included in the headers of all subsequent requests to maintain the session.

Endpoints
1. UserLogin
Purpose: Authenticate a user with their username and password.

URL: /UserLogin

Request Body:


{
  "UserName": "user",
  "Password": "33"
}
The body must be encrypted using AES256 with the provided key and IV.

Response:

Success:


{
  "Request_State": true,
  "Rescode": 200,
  "ResultData": "xlDgyOqM8xwdcrUbWCrS0WwUYtAfBM/fzV1SuEPnajc2fRskPEYzhWjrWofE/3URQk3bloycihQ=",
  "SessionID": "DFnNgsHmDV+h/QnRx3STCZVoIFFXuRg9XwfqZlUpqg7mZCRKWbOcN+wrWm9/geSOM4VHCQiRUPY="
}
ResultData contains an encrypted OTP ID (used in the next step).

SessionID must be stored and used in subsequent requests.

Error:


{
  "Request_State": false,
  "Rescode": -100,
  "ResultData": "Exception-Error !",
  "SessionID": null
}
2. ConfirmOTP
Purpose: Confirm the OTP sent to the user after login.

URL: /ConfirmOTP

Request Body:


{
  "id": "value_from_ResultData_in_login_response",
  "OTP": "123456"
}
The body must be encrypted using AES256.

Response:

Success:


{
  "Request_State": true,
  "Rescode": 200,
  "ResultData": "Encrypted list has json object contain (id,num,name,phone_active)",
  "SessionID": "DFnNgsHmDV+h/QnRx3STCZVoIFFXuRg9XwfqZlUpqg7mZCRKWbOcN+wrWm9/geSOM4VHCQiRUPY="
}
ResultData contains encrypted user details (e.g., ID, name, phone number).

Error:


{
  "Request_State": false,
  "Rescode": -100,
  "ResultData": "Exception-Error !",
  "SessionID": null
}
3. ResetPassword
Purpose: Reset a user's password. This is a 3-step process:

Initiate Reset: Send the username and reset type (WhatsApp or Email).

Verify OTP: Confirm the OTP sent to the user.

Submit New Password: Provide the new password.

URL: /ResetPassword

Request Body:

State 0 (Initiate Reset):


{
  "state": 0,
  "UserName": "user",
  "Type": 0, // 0 for WhatsApp, 1 for Email
  "ResetData": "whatsapp_number_or_email"
}
State 1 (Verify OTP):


{
  "state": 1,
  "UserName": "user",
  "Type": 0,
  "ResetData": "whatsapp_number_or_email",
  "ResetID": "value_from_ResultData_in_State_0_response",
  "OTP": "123456"
}
State 2 (Submit New Password):


{
  "state": 2,
  "UserName": "user",
  "Type": 0,
  "ResetData": "whatsapp_number_or_email",
  "ResetID": "value_from_ResultData_in_State_0_response",
  "OTP": "123456",
  "Password": "new_password"
}
Response:

Success:

{
  "Request_State": true,
  "Rescode": 200,
  "ResultData": "Your Password has been changed successfully",
  "SessionID": null
}
Error:

{
  "Request_State": false,
  "Rescode": -100,
  "ResultData": "Exception-Error !",
  "SessionID": null
}
